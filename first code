secret_number = 9
i = 0
j = 3
while i < 3:
    guess = int(input("Guess: "))
    i += 1
    if guess == secret_number:
        print("You won")
        break
    
else:
    print("You lost")    

guess game

numbers = [5, 2, 1, 5, 7, 4]
uniques = []
for number in numbers:
    if number not in uniques:
        uniques.append(number)
    
print(uniques)

removing the duplicates from a list

numbers = (1, 2, 3) - tuples cant be modifed

ustomer = {
    "name": "John Smith",
    "age": 30,
    "is_verified": True
}
customer["birthdate"] = "Jan 1"
print(customer.get("birthdate"))

Dicitonaries- u cant add 2 of the same but u can update them after and it will be printed the updated veriosn of the dicitionaries

phone = input("Phone: ")

digits_maping = {
    "1": "One",
    "2": "Two",
    "3": "Three",
    "4": "Four",
    "5": "Five",
    "6": "Six",
    "7": "Seven",
    "8": "Eight",
    "9": "Nine",
    "0": "Zero"
}
output = ""
for ch in phone:
    output += digits_maping.get(ch, "!") + ""

print(output)

translate from number to string using dictionaries and calling them.


def greet_user(name, last_name):
    print(f"Hi {name} {last_name}")
    print("Welcome aboard")


print("Start")
greet_user(last_name="John", name="Smith")
print("Finish")

introduction in functions


try:
    age = int(input("Age: "))
    income = 20000
    risk = income / age
    print(age)
except ZeroDivisionError:
    print("Age can not be 0")
except ValueError:
    print("Invalid Value")

exception for values and for 0 values do not let the code crash(enjoyed this one)

class Point:
    def move(self):
        print("move")

    def draw(self):
        print("draw")


point1 = Point()
point1.x = 10
point1.y = 20
print(point1.x)
point1.draw()

point2 = Point()
point2.x = 11
print(point2.x)

first look at classes u can acces functions from the class u made pretty cool


class Person:
    def __init__(self, name):
        self.name = name

    def talk(self):
        print(f"Hi, I am {self.name}")


John = Person("John Smith")
John.talk()

bob = Person("Bob Smith")
bob.talk()

constructors are pretty compplicated ngl but i think i got it


class Mammal:
    def walk(self):
        print("Walk")

class Dog(Mammal):
    def bark(self):
        print("Bark")
    

class Cat(Mammal):
    def be_annoying(self):
        print("annoying")


dog1 = Dog()
dog1.walk()
dog1.bark()

cat1 = Cat()
cat1.be_annoying()

inheritance is pretty easy and useful

import converters                                                 
from converters import kg_to_lbs

print(kg_to_lbs(100))

print(converters.kg_to_lbs(70))

 def lbs_to_kg(weight):
    return weight * 0.45

def kg_to_lbs(weight):
    return weight / 0.45

now modules are rlly good only use import "name of the file"
or import from "name of the filme" and only the method u want


another module code 
def find_max(numbers):
    max = numbers[0]
    for number in numbers:
        if number > max:
            max = number
        return max

import utils


numbers = [10, 3, 6, 2]
max = utils.find_max(numbers)
print(max)




import random

class Dice:
    def roll(self):
        first = random.randint(1, 6)
        second = random.randint(1, 6)
        return first, second
        

dice = Dice()
dice.roll()
print(dice.roll())
 roll a dice pretty fun tho

import openpyxl as xl
from openpyxl.chart import BarChart, Reference



wb = xl.load_workbook("transactions.xlsx")
sheet = wb["Sheet1"]
cell = sheet["a1"]
cell = sheet.cell(1, 1)

for row in range(2, sheet.max_row + 1):
    sheet.cell(row, 3)
    corrected_price = cell.value * 2
    corrected_price_cell = sheet.cell(row, 4)
    corrected_price_cell.value = corrected_price


values = Reference(sheet,
                   min_row=2,
                   max_row=sheet.max_row,
                   min_col=4,
                   max_col=4)


chart = BarChart()
chart.add_data(values)
sheet.add_chart(chart, "e2")

wb.save("transactions2.xlsx")
 first automating code in excel that also creats a chart of the values u inserted

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

music_data = pd.read_csv("music.csv")
X = music_data.drop(columns=['genre'])
y = music_data['genre']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


model = DecisionTreeClassifier()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

score = accuracy_score(y_test, predictions)
print(score)

prediciton and accuracy code ML using python anaconda and jupyter i think




# name = input("Enter your full name: ")

phone_number = input("Enter your phone number: ")
# result = len(name)
# result = name.find("o")
# result = name.rfind("Q")
# name = name.capitalize()
# name = name.upper()
# name = name.lower()
# result = name.isdigit()
# result = name.isalpha()
# result = phone_number.count("-")
phone_number = phone_number.replace("-", "")


print(phone_number)
 just for my information



username = input("Enter a username: ")



if len(username) > 12:
    print("Your username cant be more than 12 chars")
elif not username.find(" ") == -1:
    print("Your username cant containe spaces")
elif not username.isalpha():
    print("Your username cant contain numbers")
else:
    print(f"Welcome {username}")

username with conditions

credit_number = "1234-5678-9012-3456"

credit_number = credit_number[::-1]
print(credit_number)
reverse the numbers- i didnt know this

price1 = 3.14159
price2 = -987.65
price3 = 12.34

print(f"Price 1 is ${price1:<.2f}")
print(f"Price 2 is ${price2:^,.3f}")
print(f"Price 3 is ${price3:>,.10f}")
 format specifiers

name = input("Enter your full name(press Q to quit the loop): ")

while len(name) > 10 or len(name) < 3:
    print("Your name is not valid try again!")
    name = input("Enter your full name(press Q to quit the loop): ")

print("Valide username")


while loops

import time

my_time = int(input("Enter the time in seconds "))

for x in range(my_time, 0, -1):
    seconds = x % 60
    minutes = int(x / 60) % 60
    hours = int(x / 3600)
    print(f"{hours:02}:{minutes:02}:{seconds:02}")
    time.sleep(1)



print("Time is up")

countdown program pretty fun


